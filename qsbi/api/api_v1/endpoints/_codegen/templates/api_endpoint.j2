from fastapi import APIRouter, Query, HTTPException, Request, Depends, Security
from typing import Optional, List

import qsbi.api.schemas.base
import qsbi.api.schemas.{{ module }} as schema
import qsbi.api.crud as crud
import qsbi.api.security.deps as auth

router = APIRouter()

## CREATE
@router.post("", status_code=201, response_model=schema.{{ classname }})
async def create_{{ module }}(
        *,
        {{ module }}_in: schema.{{ classname }}Create,
        curr_user = Security(auth.get_current_active_user, scopes=["create"]),
        ) -> schema.{{ classname }}:
    """
    create a new {{ module }}
    """
    {{ module }}: schema.{{ classname }}  = await crud.{{ module }}.create({{ module }}_in)
    return {{ module }}

## READ
@router.get("/list", status_code=200, response_model=List[schema.{{ classname }}])
async def list_{{ module }}s(
        *,
        skip: Optional[int] = 0,
        limit: Optional[int] = 100,
        curr_user = Security(auth.get_current_active_user, scopes=["read"]),
        ) -> List[schema.{{ classname }}]:
    """
    list all {{ module }}s
    """
    {{ module }}s: List[schema.{{ classname }}] = await crud.{{ module }}.list(skip, limit)
    return {{ module }}s

@router.post("/search", status_code=200, response_model=List[schema.{{ classname }}])
async def search_{{ module }}s(
        *,
        {{ module }}_in: schema.{{ classname }},
        limit: Optional[int] = 100,
        curr_user = Security(auth.get_current_active_user, scopes=["read"]),
        ) -> List[schema.{{ classname }}]:
    """
    search {{ module }}s
    """
    {{ module }}s: List[schema.{{ classname }}] = await crud.{{ module }}.search({{ module }}_in, limit)
    return {{ module }}s

{% for attr in get_by_attrs -%}
@router.get("/{{ attr.name }}/{{'{'}}{{ attr.name }}{{'}'}}", status_code=200, response_model=schema.{{ classname }})
async def get_{{ module }}_by_{{ attr.name }}(
        *,
        {{ attr.name }}: {{ attr.type }},
        curr_user = Security(auth.get_current_active_user, scopes=["read"]),
        ) -> Optional[schema.{{ classname }}]:
    """
    get {{ module }} by {{ attr.name }}
    """
    result: Optional[schema.{{ classname }}] = await crud.{{ module }}.get_by('{{ attr.name }}', {{ attr.name }})
    if not result:
        raise HTTPException(
            status_code=404, detail=f"{{ classname }} with {{ attr.name }} {{'{'}}{{ attr.name }}{{'}'}} not found"
        )
    return result
  
{% endfor -%}

@router.get("/count", status_code=200, response_model=int)
async def count_{{ module }}s(
        *,
        curr_user = Security(auth.get_current_active_user, scopes=["login"]),
        ) -> int:
    """
    count all {{ module }}s
    """
    count: int = await crud.{{ module }}.count()
    return count

## UPDATE
@router.put("", status_code=201, response_model=schema.{{ classname }})
async def update_{{ module }}(
        *,
        {{ module }}_in: schema.{{ classname }}Update,
        curr_user = Security(auth.get_current_active_user, scopes=["update"]),
        ) -> Optional[schema.{{ classname }}]:
    """
    update existing {{ module }}
    """
    result: Optional[schema.{{ classname }}] = await crud.{{ module }}.update({{ module }}_in)
    if not result:
        raise HTTPException(
            status_code=404, detail=f"{{ classname }} {{'{'}}{{ module }}_in{{'}'}} not found"
        )
    return result

## DELETE
@router.delete("", status_code=200, response_model=schema.{{ classname }})
async def delete_{{ module }}(
        *,
        {{ module }}_in: schema.{{ classname }}Delete,
        curr_user = Security(auth.get_current_active_user, scopes=["delete"]),
	) -> Optional[schema.{{ classname }}]:
    """
    delete one {{ module }}
    """
    result: Optional[schema.{{ classname }}] = await crud.{{ module }}.delete({{ module }}_in)
    if not result:
        raise HTTPException(
            status_code=404, detail=f"{{ classname }} {{'{'}}{{ module }}_in{{'}'}} not found"
        )
    return result
