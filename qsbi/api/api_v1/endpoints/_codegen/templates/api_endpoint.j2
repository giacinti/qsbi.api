from fastapi import APIRouter, Query, HTTPException, Request, Depends
from typing import Optional, Dict

import qsbi.api.schemas.{{ module }} as schema
import qsbi.api.crud as crud

router = APIRouter()

## CREATE
@router.post("/", status_code=201, response_model=schema.{{ classname }})
def create_{{ module }}(
        *,
        {{ module }}_in: schema.{{ classname }}Create,
        sess: crud.CRUDSession = Depends(crud.get_session),
        ) -> schema.{{ classname }}:
    """
    create a new {{ module }}
    """
    {{ module }} = crud.{{ module }}.create(sess, {{ module }}_in)
    return {{ module }}

## READ
@router.get("/list", status_code=200, response_model=schema.{{ classname }}Seq)
def list_{{ module }}s(
        *,
        skip: Optional[int] = 0,
        limit: Optional[int] = 100,
        sess: crud.CRUDSession = Depends(crud.get_session),
        ) -> schema.{{ classname }}Seq:
    """
    list all {{ module }}s
    """
    {{ module }}s = crud.{{ module }}.list(sess, skip, limit)
    return {"results": {{ module }}s}

@router.post("/search", status_code=200, response_model=schema.{{ classname }}Seq)
def search_{{ module }}s(
        *,
        {{ module }}_in: schema.{{ classname }}Read,
        limit: Optional[int] = 100,
        sess: crud.CRUDSession = Depends(crud.get_session),
        ) -> schema.{{ classname }}Seq:
    """
    search {{ module }}s
    """
    {{ module }}s = crud.{{ module }}.search(sess, {{ module }}_in, limit)
    return {"results": {{ module }}s}

{% for attr in get_by_attrs -%}
@router.get("/{{ attr.name }}/{{'{'}}{{ attr.name }}{{'}'}}", status_code=200, response_model=schema.{{ classname }})
def get_{{ module }}_by_{{ attr.name }}(
        *,
        {{ attr.name }}: {{ attr.type }},
        sess: crud.CRUDSession = Depends(crud.get_session),
        ) -> Optional[schema.{{ classname }}]:
    """
    get {{ module }} by {{ attr.name }}
    """
    result = crud.{{ module }}.get_by(sess, '{{ attr.name }}', {{ attr.name }})
    if not result:
        raise HTTPException(
            status_code=404, detail=f"{{ classname }} with {{ attr.name }} {{'{'}}{{ attr.name }}{{'}'}} not found"
        )
    return result
  
{% endfor %}

## UPDATE
@router.put("/", status_code=201, response_model=schema.{{ classname }})
def update_{{ module }}(
        *,
        {{ module }}_in: schema.{{ classname }}Update,
        sess: crud.CRUDSession = Depends(crud.get_session),
        ) -> Optional[schema.{{ classname }}]:
    """
    update existing {{ module }}
    """
    result = crud.{{ module }}.update(sess, {{ module }}_in)
    if not result:
        raise HTTPException(
            status_code=404, detail=f"{{ classname }} {{'{'}}{{ module }}_in{{'}'}} not found"
        )
    return result

## DELETE
@router.delete("/", status_code=200, response_model=schema.{{ classname }}Dict)
def delete_{{ module }}(
        *,
        {{ module }}_in: schema.{{ classname }}Delete,
        sess: crud.CRUDSession = Depends(crud.get_session),
	) -> Optional[Dict]:
    """
    delete one {{ module }}
    """
    result = crud.{{ module }}.delete(sess, {{ module }}_in)
    if not result:
        raise HTTPException(
            status_code=404, detail=f"{{ classname }} {{'{'}}{{ module }}_in{{'}'}} not found"
        )
    return result

